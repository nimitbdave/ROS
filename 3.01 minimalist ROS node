// Minimalist ROS node.

#!/usr/bin/env python  
                              /*
                              is known as the shebang. 
                              It lets the operating system know that this is a Python file, 
                              and that it should be passed to the Python interpreter.
                              */

import rospy 
                              // appears in every ROS Python node and imports all basic functionality.

from std_msgs.msg import Int32 
                              /*
                              The next line imports the definition of the message that we’re going to send over the topic.

                              In this case, we’re going to use a 32-bit integer, 
                              defined in the ROS standard message package, std_msgs. 
                              For the import to work as expected, we need to import from <package name>.msg, 
                              since this is where the package definitions are stored (more on this later).

                              Since we’re using a message from another package, we have to tell the ROS
                              build system about this by adding a dependency to our package.xml file:
                              <depend package="std_msgs" />

                              Without this dependency, ROS will not know where to find the message definition,
                              and the node will not be able to run.

                              After initializing the node, we advertise it with a Publisher:
                              pub = rospy.Publisher('counter', Int32)
                              */

rospy.init_node('topic_publisher')


pub = rospy.Publisher('counter', Int32)
                              //At this point, the topic is advertised and is available for other nodes to subscribe to.
                              //Now we can go about actually publishing messages over the topic:


rate = rospy.Rate(2) 
                              //First, we set the rate, in hertz, at which we want to publish. For this example, we’re
                              //going to publish twice a second.


count = 0
while not rospy.is_shutdown(): //The is_shutdown() function will return True if the
                               //node is ready to be shut down and False otherwise, so we can use this to determine if
                               //it is time to exit the while loop.

    pub.publish(count)          //Inside the while loop, we publish the current value of the counter, increment its value
                                //by 1, and then sleep for a while.

    count += 1 
    rate.sleep()                //The call to rate.sleep() will sleep for long enough
                                //to make sure that we run the body of the while loop at approximately 2 Hz.

//And that’s it. We now have a minimalist ROS node that advertises the counter topic
//and publishes integers on it.

