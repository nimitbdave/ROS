#!/usr/bin/env python

import rospy

from basics.srv import WordCount,WordCountResponse                # We first need to import the code generated by catkin.

                                                                  # Notice that we need to import both WordCount and WordCountResponse.
                                                                  # Both of these are generated in a Python module 
                                                                  # with the same name as the package, with
                                                                  # a .srv extension (basics.srv, in our case).

                                                                     
def count_words(request):                                         
  return WordCountResponse(len(request.words.split()))            # The callback function takes a single argument 
                                                                  # of type WordCountRequest ... count_words(request)
                                                                  # [This fxn is defined in 4.02, where I created a class.]
                                                                  # and returns a single argument of type WordCountResponse.
                                                                  
                                                                  # WordCountResponse constructor takes parameters
                                                                  # which match those in service-definition file. 
                                                                  # This, here, means an unsigned integer.  
                                                                  # Services which fail, should return NONE.  
                                                                  
                                                                  

rospy.init_node('service_server')                                 # After initializing the node,

service = rospy.Service('word_count', WordCount, count_words)     # we advertise the service, 
                                                                  # giving it a name (word_count)
                                                                  # and a type (WordCount)
                                                                  # and specifying the callback that will implement it:
                                                                  
rospy.spin()                                                      # Finally, we make a call to rospy.spin(), 
                                                                  # which gives control of the node over to ROS
                                                                  # and exits when the node is ready to shut down.
                                                                  
""" 
You don’t actually have to hand control over by calling rospy.spin() 
(unlike in the C++ API), 
since callbacks run in their own threads. 
You could set up your own loop, 
remembering to check for node termination, 
if you have something else you need to do. 
However, using rospy.spin() is a convenient way to keep the node alive 
until it’s ready to shut down.
"""
